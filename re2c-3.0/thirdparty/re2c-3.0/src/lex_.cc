/* Generated by re2c 3.0 on Thu Jan 27 08:39:52 2022 */
#line 1 "lex.re"
#include <stdio.h>

#include "util/c99_stdint.h"

#include "encoding/enc.h"
#include "msg/msg.h"
#include "parse/ast.h"
#include "parse/unescape.h"
#include "util/range.h"
#include "util/s_to_n32_unsafe.h"
#include "parse.h"
#include "lex.h"


extern YYSTYPE yylval;

namespace re2c {

static int32_t lex_cls_chr(const char *&, uint32_t &);

#line 30 "lex.re"


int lex(const char *&cur)
{
    
#line 30 "lex.cc"
const char *yyt1;const char *yyt2;
#line 34 "lex.re"

    const char *mar, *x, *y;
    std::vector<ASTRange> cls;
    bool neg = false;
    uint32_t l, u;


#line 40 "lex.cc"
{
	char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	yych = *cur;
	if (yych <= '>') {
		if (yych <= '\'') {
			if (yych <= 0x00) goto yy1;
			if (yych == '$') goto yy4;
			goto yy2;
		} else {
			if (yych <= '+') goto yy5;
			if (yych == '.') goto yy6;
			goto yy2;
		}
	} else {
		if (yych <= ']') {
			if (yych <= '?') goto yy5;
			if (yych == '[') goto yy7;
			goto yy2;
		} else {
			if (yych <= 'z') {
				if (yych <= '^') goto yy4;
				goto yy2;
			} else {
				if (yych <= '{') goto yy8;
				if (yych <= '|') goto yy5;
				goto yy2;
			}
		}
	}
yy1:
	++cur;
#line 43 "lex.re"
	{ return 0; }
#line 108 "lex.cc"
yy2:
	++cur;
yy3:
#line 78 "lex.re"
	{
        ASTChar c = {static_cast<uint32_t>(cur[-1]), NOWHERE};
        std::vector<ASTChar> *str = new std::vector<ASTChar>;
        str->push_back(c);
        yylval.regexp = ast_str(NOWHERE, str, false);
        return TOKEN_REGEXP;
    }
#line 120 "lex.cc"
yy4:
	++cur;
#line 47 "lex.re"
	{
        error("anchors are not supported");
        return TOKEN_ERROR;
    }
#line 128 "lex.cc"
yy5:
	++cur;
#line 45 "lex.re"
	{ return cur[-1]; }
#line 133 "lex.cc"
yy6:
	++cur;
#line 73 "lex.re"
	{
        yylval.regexp = ast_dot(NOWHERE);
        return TOKEN_REGEXP;
    }
#line 141 "lex.cc"
yy7:
	yych = *++cur;
	if (yych == '^') goto yy9;
#line 53 "lex.re"
	{ goto cls; }
#line 147 "lex.cc"
yy8:
	yych = *(mar = ++cur);
	if (yych <= '/') goto yy3;
	if (yych <= '9') {
		yyt1 = cur;
		goto yy10;
	}
	goto yy3;
yy9:
	++cur;
#line 52 "lex.re"
	{ neg = true; goto cls; }
#line 160 "lex.cc"
yy10:
	yych = *++cur;
	if (yybm[0+yych] & 128) {
		goto yy10;
	}
	if (yych == ',') goto yy12;
	if (yych == '}') goto yy13;
yy11:
	cur = mar;
	goto yy3;
yy12:
	yych = *++cur;
	if (yych <= '/') goto yy11;
	if (yych <= '9') {
		yyt2 = cur;
		goto yy14;
	}
	if (yych == '}') goto yy15;
	goto yy11;
yy13:
	++cur;
	x = yyt1;
#line 55 "lex.re"
	{
        if (!s_to_u32_unsafe(x, cur - 1, yylval.bounds.min)) goto err_cnt;
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_COUNT;
    }
#line 189 "lex.cc"
yy14:
	yych = *++cur;
	if (yych <= '/') goto yy11;
	if (yych <= '9') goto yy14;
	if (yych == '}') goto yy16;
	goto yy11;
yy15:
	++cur;
	x = yyt1;
#line 67 "lex.re"
	{
        if (!s_to_u32_unsafe(x, cur - 2, yylval.bounds.min)) goto err_cnt;
        yylval.bounds.max = AST::MANY;
        return TOKEN_COUNT;
    }
#line 205 "lex.cc"
yy16:
	++cur;
	x = yyt1;
	y = yyt2;
#line 61 "lex.re"
	{
        if (!s_to_u32_unsafe(x, y - 1, yylval.bounds.min)
            || !s_to_u32_unsafe(y, cur - 1, yylval.bounds.max)) goto err_cnt;
        return TOKEN_COUNT;
    }
#line 216 "lex.cc"
}
#line 85 "lex.re"


cls:
    if (lex_cls_chr(cur, l) != 0) goto err;

#line 224 "lex.cc"
{
	char yych;
	yych = *(mar = cur);
	if (yych == '-') goto yy19;
yy18:
#line 90 "lex.re"
	{ u = l; goto add; }
#line 232 "lex.cc"
yy19:
	yych = *++cur;
	if (yych != ']') goto yy20;
	cur = mar;
	goto yy18;
yy20:
	++cur;
	cur -= 1;
#line 91 "lex.re"
	{ if (lex_cls_chr(cur, u) != 0) goto err; goto add; }
#line 243 "lex.cc"
}
#line 92 "lex.re"

add:
    if (l > u) goto err;
    cls.push_back(ASTRange(l, u, NOWHERE));

#line 251 "lex.cc"
{
	char yych;
	yych = *cur;
	if (yych == ']') goto yy22;
#line 97 "lex.re"
	{ goto cls; }
#line 258 "lex.cc"
yy22:
	++cur;
#line 98 "lex.re"
	{
        std::vector<ASTRange> *p = new std::vector<ASTRange>;
        p->swap(cls);
        yylval.regexp = ast_cls(NOWHERE, p, neg);
        return TOKEN_REGEXP;
    }
#line 268 "lex.cc"
}
#line 104 "lex.re"


err:
    error("syntax error: %s\n", cur);
    return TOKEN_ERROR;

err_cnt:
    error("repetition count overflow");
    return TOKEN_ERROR;
}

int32_t lex_cls_chr(const char *&cur, uint32_t &c)
{
    const char *mar, *p = cur;

#line 286 "lex.cc"
{
	char yych;
	yych = *cur;
	if (yych <= 0x00) goto yy24;
	if (yych <= 'Z') goto yy25;
	if (yych <= '[') goto yy27;
	if (yych <= '\\') goto yy28;
	goto yy25;
yy24:
	++cur;
#line 119 "lex.re"
	{ return 1; }
#line 299 "lex.cc"
yy25:
	++cur;
yy26:
#line 137 "lex.re"
	{ c = static_cast<uint8_t>(cur[-1]); return 0; }
#line 305 "lex.cc"
yy27:
	yych = *++cur;
	if (yych <= '9') {
		if (yych == '.') goto yy30;
		goto yy26;
	} else {
		if (yych <= ':') goto yy31;
		if (yych == '=') goto yy32;
		goto yy26;
	}
yy28:
	yych = *(mar = ++cur);
	switch (yych) {
		case '\\': goto yy33;
		case ']': goto yy34;
		case 'a': goto yy35;
		case 'b': goto yy36;
		case 'f': goto yy37;
		case 'n': goto yy38;
		case 'r': goto yy39;
		case 't': goto yy40;
		case 'v': goto yy41;
		case 'x': goto yy42;
		default: goto yy29;
	}
yy29:
#line 126 "lex.re"
	{ c = static_cast<uint8_t>('\\');    return 0; }
#line 334 "lex.cc"
yy30:
	++cur;
#line 120 "lex.re"
	{ error("collating characters not supported"); return 1; }
#line 339 "lex.cc"
yy31:
	++cur;
#line 121 "lex.re"
	{ error("character classes not supported");    return 1; }
#line 344 "lex.cc"
yy32:
	++cur;
#line 122 "lex.re"
	{ error("equivalence classes not supported");  return 1; }
#line 349 "lex.cc"
yy33:
	++cur;
#line 134 "lex.re"
	{ c = static_cast<uint8_t>('\\');    return 0; }
#line 354 "lex.cc"
yy34:
	++cur;
#line 135 "lex.re"
	{ c = static_cast<uint8_t>(']');     return 0; }
#line 359 "lex.cc"
yy35:
	++cur;
#line 127 "lex.re"
	{ c = static_cast<uint8_t>('\a');    return 0; }
#line 364 "lex.cc"
yy36:
	++cur;
#line 128 "lex.re"
	{ c = static_cast<uint8_t>('\b');    return 0; }
#line 369 "lex.cc"
yy37:
	++cur;
#line 129 "lex.re"
	{ c = static_cast<uint8_t>('\f');    return 0; }
#line 374 "lex.cc"
yy38:
	++cur;
#line 130 "lex.re"
	{ c = static_cast<uint8_t>('\n');    return 0; }
#line 379 "lex.cc"
yy39:
	++cur;
#line 131 "lex.re"
	{ c = static_cast<uint8_t>('\r');    return 0; }
#line 384 "lex.cc"
yy40:
	++cur;
#line 132 "lex.re"
	{ c = static_cast<uint8_t>('\t');    return 0; }
#line 389 "lex.cc"
yy41:
	++cur;
#line 133 "lex.re"
	{ c = static_cast<uint8_t>('\v');    return 0; }
#line 394 "lex.cc"
yy42:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy43;
		if (yych <= '9') goto yy44;
	} else {
		if (yych <= 'F') goto yy44;
		if (yych <= '`') goto yy43;
		if (yych <= 'f') goto yy44;
	}
yy43:
	cur = mar;
	goto yy29;
yy44:
	yych = *++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy43;
		if (yych >= ':') goto yy43;
	} else {
		if (yych <= 'F') goto yy45;
		if (yych <= '`') goto yy43;
		if (yych >= 'g') goto yy43;
	}
yy45:
	++cur;
#line 124 "lex.re"
	{ c = unesc_hex(p, cur); return 0; }
#line 422 "lex.cc"
}
#line 138 "lex.re"

}

} // namespace re2c
