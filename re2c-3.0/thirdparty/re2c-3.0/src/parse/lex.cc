/* Generated by re2c 3.0 on Thu Jan 27 08:39:55 2022 */
#line 1 "parse/lex.re"
#include <ctype.h>
#include "util/c99_stdint.h"
#include <limits>
#include <string>
#include <utility>
#include <vector>

#include "codegen/code.h"
#include "encoding/enc.h"
#include "msg/location.h"
#include "msg/msg.h"
#include "msg/warn.h"
#include "options/opt.h"
#include "parse/ast.h"
#include "parse/input.h"
#include "parse/lex.h"
#include "parse/scanner.h"
#include "parse/parse.h" // needed by "parser.h"
#include "parse/unescape.h"
#include "regexp/rule.h"
#include "util/file_utils.h"
#include "util/s_to_n32_unsafe.h"
#include "util/string_utils.h"
#include "parse/parser_.h"


extern YYSTYPE yylval;

namespace re2c {

// Global re2c configurations and definitions.
#line 64 "parse/lex.re"


#line 123 "parse/lex.re"


InputBlockKind Scanner::echo(Output &out, std::string &block_name)
{
    const opt_t *opts = out.block().opts;
    code_alc_t &alc = out.allocator;
    const char *x, *y;

    if (is_eof()) return INPUT_END;

next:
    tok = cur;
loop:
    location = cur_loc();
    ptr = cur;

#line 55 "parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 18) { if (!fill(18)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x00) goto yy1;
			if (yych <= 0x08) goto yy2;
			goto yy4;
		} else {
			if (yych <= '\n') goto yy5;
			if (yych <= '\f') goto yy2;
			goto yy7;
		}
	} else {
		if (yych <= '$') {
			if (yych == ' ') goto yy4;
			goto yy2;
		} else {
			if (yych <= '%') goto yy8;
			if (yych == '/') goto yy9;
			goto yy2;
		}
	}
yy1:
	++cur;
#line 273 "parse/lex.re"
	{
        if (is_eof()) {
            out.wraw(tok, ptr);
            return INPUT_END;
        }
        goto loop;
    }
#line 125 "parse/lex.cc"
yy2:
	++cur;
yy3:
#line 293 "parse/lex.re"
	{ goto loop; }
#line 131 "parse/lex.cc"
yy4:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy10;
	}
	if (yych == '%') goto yy12;
	goto yy3;
yy5:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy13;
	} else {
		if (yych <= ' ') goto yy13;
		if (yych == '#') goto yy14;
	}
yy6:
#line 288 "parse/lex.re"
	{
        next_line();
        goto loop;
    }
#line 155 "parse/lex.cc"
yy7:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy5;
	goto yy3;
yy8:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy15;
	goto yy3;
yy9:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '*') goto yy16;
	goto yy3;
yy10:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 32) {
		goto yy10;
	}
	if (yych == '%') goto yy12;
yy11:
	cur = mar;
	if (yyaccept <= 2) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy3;
			} else {
				goto yy6;
			}
		} else {
			goto yy155;
		}
	} else {
		if (yyaccept == 3) {
			goto yy157;
		} else {
			goto yy165;
		}
	}
yy12:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy15;
	goto yy11;
yy13:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy13;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy13;
		if (yych != '#') goto yy11;
	}
yy14:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy17;
		goto yy11;
	}
yy15:
	++cur;
#line 139 "parse/lex.re"
	{
        if (pos != ptr) {
            // re2c does not parse user-defined code outside of re2c blocks, therefore it
            // can confuse `%{` in the middle of a string or a comment with a block start.
            // To avoid this recognize `%{` as a block start only on a new line, possibly
            // preceded by whitespaces.
            goto loop;
        }
        out.wraw(tok, ptr);
        block_name.clear();
        return INPUT_GLOBAL;
    }
#line 238 "parse/lex.cc"
yy16:
	yych = (unsigned char)*++cur;
	if (yych == '!') goto yy18;
	goto yy11;
yy17:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy19;
	goto yy11;
yy18:
	yych = (unsigned char)*++cur;
	switch (yych) {
		case 'c': goto yy20;
		case 'g': goto yy21;
		case 'h': goto yy22;
		case 'i': goto yy23;
		case 'l': goto yy24;
		case 'm': goto yy25;
		case 'r': goto yy26;
		case 's': goto yy27;
		case 't': goto yy28;
		case 'u': goto yy29;
		default: goto yy11;
	}
yy19:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy30;
	goto yy11;
yy20:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy31;
	goto yy11;
yy21:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy32;
	goto yy11;
yy22:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy33;
	goto yy11;
yy23:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy34;
	if (yych == 'n') goto yy35;
	goto yy11;
yy24:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy36;
	goto yy11;
yy25:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy37;
	if (yych == 't') goto yy38;
	goto yy11;
yy26:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy39;
	if (yych == 'u') goto yy40;
	goto yy11;
yy27:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy41;
	goto yy11;
yy28:
	yych = (unsigned char)*++cur;
	if (yych == 'y') goto yy42;
	goto yy11;
yy29:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy43;
	goto yy11;
yy30:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy44;
	goto yy11;
yy31:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy45;
	goto yy11;
yy32:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy46;
	goto yy11;
yy33:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy47;
	goto yy11;
yy34:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy48;
	goto yy11;
yy35:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy49;
	goto yy11;
yy36:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy50;
	goto yy11;
yy37:
	yych = (unsigned char)*++cur;
	if (yych == 'x') goto yy51;
	goto yy11;
yy38:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy52;
	goto yy11;
yy39:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy53;
	goto yy11;
yy40:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy54;
	goto yy11;
yy41:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy55;
	goto yy11;
yy42:
	yych = (unsigned char)*++cur;
	if (yych == 'p') goto yy56;
	goto yy11;
yy43:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy57;
	goto yy11;
yy44:
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy59;
	if (yych <= '9') goto yy11;
	goto yy59;
yy45:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy60;
	goto yy11;
yy46:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy61;
	goto yy11;
yy47:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy62;
	goto yy11;
yy48:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy63;
	goto yy11;
yy49:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy64;
	goto yy11;
yy50:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy65;
	goto yy11;
yy51:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy66;
	if (yych == 'n') goto yy67;
	goto yy11;
yy52:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy68;
	goto yy11;
yy53:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy69;
	goto yy11;
yy54:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy70;
	goto yy11;
yy55:
	yych = (unsigned char)*++cur;
	if (yych == 'g') goto yy71;
	goto yy11;
yy56:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy72;
	goto yy11;
yy57:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy73;
	goto yy11;
yy58:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy59:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy58;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy58;
		if (yych <= '0') goto yy11;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy74;
		}
		goto yy11;
	}
yy60:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy75;
	goto yy11;
yy61:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy76;
	goto yy11;
yy62:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy77;
	goto yy11;
yy63:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy78;
	goto yy11;
yy64:
	yych = (unsigned char)*++cur;
	if (yych == 'u') goto yy79;
	goto yy11;
yy65:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy80;
	goto yy11;
yy66:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy81;
	goto yy11;
yy67:
	yych = (unsigned char)*++cur;
	if (yych == 'm') goto yy82;
	goto yy11;
yy68:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy83;
	goto yy11;
yy69:
	++cur;
#line 152 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        if (block_name == "local") {
            msg.error(cur_loc(), "ill-formed local block, expected `local:re2c`");
            return INPUT_ERROR;
        }
        return INPUT_GLOBAL;
    }
#line 488 "parse/lex.cc"
yy70:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy84;
	goto yy11;
yy71:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy85;
	goto yy11;
yy72:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy86;
	goto yy11;
yy73:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy87;
	goto yy11;
yy74:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy74;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy11;
		if (yych <= '\t') goto yy88;
		if (yych <= '\n') goto yy89;
		goto yy11;
	} else {
		if (yych <= '\r') goto yy90;
		if (yych == ' ') goto yy88;
		goto yy11;
	}
yy75:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy91;
	goto yy11;
yy76:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy92;
	goto yy11;
yy77:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy93;
	goto yy11;
yy78:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy94;
	goto yy11;
yy79:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy95;
	goto yy11;
yy80:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy96;
	goto yy11;
yy81:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy97;
	goto yy11;
yy82:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy98;
	goto yy11;
yy83:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy99;
	goto yy11;
yy84:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy100;
	goto yy11;
yy85:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy101;
	goto yy11;
yy86:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy102;
	goto yy11;
yy87:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy103;
	goto yy11;
yy88:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy88;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy88;
		if (yych == '"') goto yy104;
		goto yy11;
	}
yy89:
	++cur;
	cur = yyt1;
#line 281 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_stmt(0, code_newline(alc));
        set_sourceline();
        goto next;
    }
#line 596 "parse/lex.cc"
yy90:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy89;
	goto yy11;
yy91:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy105;
	goto yy11;
yy92:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy106;
	goto yy11;
yy93:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy107;
	goto yy11;
yy94:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy108;
	goto yy11;
yy95:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy109;
	goto yy11;
yy96:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy110;
	goto yy11;
yy97:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy111;
	goto yy11;
yy98:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy112;
	goto yy11;
yy99:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy113;
	goto yy11;
yy100:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy114;
	goto yy11;
yy101:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy115;
	goto yy11;
yy102:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy116;
	goto yy11;
yy103:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy117;
	goto yy11;
yy104:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy104;
	}
	if (yych <= '\n') goto yy11;
	if (yych <= '"') goto yy118;
	goto yy119;
yy105:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy120;
	goto yy11;
yy106:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy121;
	goto yy11;
yy107:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy122;
	goto yy11;
yy108:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy123;
	goto yy11;
yy109:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy124;
	goto yy11;
yy110:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy125;
	goto yy11;
yy111:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy126;
	goto yy11;
yy112:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy127;
	goto yy11;
yy113:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy128;
	goto yy11;
yy114:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy129;
	goto yy11;
yy115:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy130;
	goto yy11;
yy116:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy131;
	goto yy11;
yy117:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy132;
	goto yy11;
yy118:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy89;
	if (yych == '\r') goto yy90;
	goto yy11;
yy119:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy11;
	if (yych == '\n') goto yy11;
	goto yy104;
yy120:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy72;
	goto yy11;
yy121:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy133;
	goto yy11;
yy122:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy134;
	goto yy11;
yy123:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy135;
	goto yy11;
yy124:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy136;
	goto yy11;
yy125:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy137;
	goto yy11;
yy126:
	++cur;
#line 180 "parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXFILL, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 758 "parse/lex.cc"
yy127:
	yych = (unsigned char)*++cur;
	if (yych == 'h') goto yy138;
	goto yy11;
yy128:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy139;
	goto yy11;
yy129:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy140;
	goto yy11;
yy130:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy141;
	goto yy11;
yy131:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy142;
	goto yy11;
yy132:
	++cur;
#line 174 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_USE;
    }
#line 787 "parse/lex.cc"
yy133:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy143;
	goto yy11;
yy134:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy144;
	goto yy11;
yy135:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy145;
	goto yy11;
yy136:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy146;
	goto yy11;
yy137:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy147;
	goto yy11;
yy138:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy148;
	goto yy11;
yy139:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy149;
	goto yy11;
yy140:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy150;
	goto yy11;
yy141:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy151;
	goto yy11;
yy142:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy152;
	goto yy11;
yy143:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy153;
	goto yy11;
yy144:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy154;
	goto yy11;
yy145:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy156;
	goto yy11;
yy146:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy158;
	goto yy11;
yy147:
	++cur;
#line 162 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_LOCAL;
    }
#line 852 "parse/lex.cc"
yy148:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy159;
	goto yy11;
yy149:
	++cur;
#line 196 "parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_MTAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 865 "parse/lex.cc"
yy150:
	++cur;
#line 168 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_opt_name(block_name)) return INPUT_ERROR;
        return INPUT_RULES;
    }
#line 874 "parse/lex.cc"
yy151:
	++cur;
#line 190 "parse/lex.re"
	{
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_STAGS, 0, allow)) return INPUT_ERROR;
        goto next;
    }
#line 883 "parse/lex.cc"
yy152:
	++cur;
#line 202 "parse/lex.re"
	{
        out.cond_enum_autogen = false;
        out.warn_condition_order = false; // see note [condition order]
        uint32_t allow = DCONF_FORMAT | DCONF_SEPARATOR;
        if (!lex_block(out, CODE_COND_ENUM, opts->topIndent, allow)) return INPUT_ERROR;
        goto next;
    }
#line 894 "parse/lex.cc"
yy153:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy160;
	goto yy11;
yy154:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == ':') goto yy161;
yy155:
#line 241 "parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed header directive: expected"
            " `/*!header:re2c:<on|off>` followed by a space, a newline or the"
            " end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 911 "parse/lex.cc"
yy156:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy157;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy162;
		}
		if (yych >= '\r') {
			yyt1 = cur;
			goto yy162;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') {
				yyt1 = cur;
				goto yy162;
			}
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy163;
			}
		}
	}
yy157:
#line 267 "parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of `ignore:re2c` block: expected"
            " a space, a newline, or the end of block `*" "/`");
        return INPUT_ERROR;
    }
#line 945 "parse/lex.cc"
yy158:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy164;
	goto yy11;
yy159:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy166;
	goto yy11;
yy160:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy167;
	goto yy11;
yy161:
	yych = (unsigned char)*++cur;
	if (yych == 'o') goto yy168;
	goto yy11;
yy162:
	++cur;
	cur = yyt1;
#line 261 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        // allows arbitrary garbage before the end of the comment
        if (!lex_block_end(out, true)) return INPUT_ERROR;
        goto next;
    }
#line 972 "parse/lex.cc"
yy163:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy162;
	goto yy11;
yy164:
	yyaccept = 4;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '\t') goto yy169;
	if (yych == ' ') goto yy169;
yy165:
#line 255 "parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed include directive: expected"
            " `/*!include:re2c \"<file>\" *" "/`");
        return INPUT_ERROR;
    }
#line 989 "parse/lex.cc"
yy166:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy170;
	goto yy11;
yy167:
	++cur;
#line 210 "parse/lex.re"
	{
        out.state_goto = true;
        if (!opts->fFlag) {
            msg.error(cur_loc(), "`getstate:re2c` without `-f --storable-state` option");
            return INPUT_ERROR;
        }
        if (opts->loop_switch) {
            msg.error(cur_loc(), "`getstate:re2c` is incompatible with the --loop-switch "
                "option, as it requires cross-block transitions that are unsupported "
                "without the `goto` statement");
            return INPUT_ERROR;
        }
        if (!lex_block(out, CODE_STATE_GOTO, opts->topIndent, 0)) return INPUT_ERROR;
        goto next;
    }
#line 1012 "parse/lex.cc"
yy168:
	yych = (unsigned char)*++cur;
	if (yych == 'f') goto yy171;
	if (yych == 'n') goto yy172;
	goto yy11;
yy169:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy169;
		goto yy11;
	} else {
		if (yych <= ' ') goto yy169;
		if (yych == '"') {
			yyt1 = cur;
			goto yy173;
		}
		goto yy11;
	}
yy170:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy174;
	goto yy11;
yy171:
	yych = (unsigned char)*++cur;
	if (yych == 'f') goto yy175;
	goto yy11;
yy172:
	++cur;
#line 226 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(true);
        out.need_header = true;
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 1051 "parse/lex.cc"
yy173:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy11;
		if (yych == '\n') goto yy11;
		goto yy173;
	} else {
		if (yych <= '"') goto yy176;
		if (yych == '\\') goto yy177;
		goto yy173;
	}
yy174:
	++cur;
#line 185 "parse/lex.re"
	{
        if (!lex_block(out, CODE_MAXNMATCH, 0, DCONF_FORMAT)) return INPUT_ERROR;
        goto next;
    }
#line 1072 "parse/lex.cc"
yy175:
	++cur;
#line 234 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        out.header_mode(false);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        if (!lex_block_end(out)) return INPUT_ERROR;
        goto next;
    }
#line 1083 "parse/lex.cc"
yy176:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy11;
		if (yych <= '\n') {
			yyt2 = cur;
			goto yy178;
		}
		if (yych <= '\f') goto yy11;
		yyt2 = cur;
		goto yy178;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy11;
			yyt2 = cur;
			goto yy178;
		} else {
			if (yych == '*') {
				yyt2 = cur;
				goto yy179;
			}
			goto yy11;
		}
	}
yy177:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy11;
	if (yych == '\n') goto yy11;
	goto yy173;
yy178:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt2;
#line 248 "parse/lex.re"
	{
        out.wraw(tok, ptr);
        if (!lex_block_end(out)) return INPUT_ERROR;
        include(getstr(x + 1, y - 1), ptr);
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        goto next;
    }
#line 1128 "parse/lex.cc"
yy179:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy178;
	goto yy11;
}
#line 294 "parse/lex.re"

}

bool Scanner::lex_opt_name(std::string &name)
{
    tok = cur;

#line 1142 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy182;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy182;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy182;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy183;
			}
		} else {
			if (yych == ':') goto yy185;
		}
	}
yy181:
#line 301 "parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a block name, or the end of block `*"
            "/`");
        return false;
    }
#line 1215 "parse/lex.cc"
yy182:
	++cur;
	cur = yyt1;
#line 308 "parse/lex.re"
	{ name.clear();              return true; }
#line 1221 "parse/lex.cc"
yy183:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy182;
yy184:
	cur = mar;
	goto yy181;
yy185:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy184;
		if (yych >= '[') goto yy184;
	} else {
		if (yych == '`') goto yy184;
		if (yych >= '{') goto yy184;
	}
yy186:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy186;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy184;
		if (yych <= '\n') {
			yyt1 = cur;
			goto yy187;
		}
		if (yych <= '\f') goto yy184;
		yyt1 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy184;
			yyt1 = cur;
		} else {
			if (yych == '*') {
				yyt1 = cur;
				goto yy188;
			}
			goto yy184;
		}
	}
yy187:
	++cur;
	cur = yyt1;
#line 309 "parse/lex.re"
	{ name.assign(tok + 1, cur); return true; }
#line 1269 "parse/lex.cc"
yy188:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy187;
	goto yy184;
}
#line 310 "parse/lex.re"

}

bool Scanner::lex_name_list(code_alc_t &alc, BlockNameList **ptail)
{
    BlockNameList **phead = ptail;
loop:
    tok = cur;

#line 1285 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych <= '\n') {
			if (yych >= '\t') {
				yyt1 = cur;
				goto yy191;
			}
		} else {
			if (yych == '\r') {
				yyt1 = cur;
				goto yy191;
			}
		}
	} else {
		if (yych <= '*') {
			if (yych <= ' ') {
				yyt1 = cur;
				goto yy191;
			}
			if (yych >= '*') {
				yyt1 = cur;
				goto yy192;
			}
		} else {
			if (yych == ':') goto yy194;
		}
	}
yy190:
#line 319 "parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed start of a block: expected a space, a"
            " newline, a colon followed by a list of colon-separated block"
            " names, or the end of block `*" "/`");
        return false;
    }
#line 1358 "parse/lex.cc"
yy191:
	++cur;
	cur = yyt1;
#line 326 "parse/lex.re"
	{
        *ptail = NULL;
        return true;
    }
#line 1367 "parse/lex.cc"
yy192:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy191;
yy193:
	cur = mar;
	goto yy190;
yy194:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy193;
		if (yych >= '[') goto yy193;
	} else {
		if (yych == '`') goto yy193;
		if (yych >= '{') goto yy193;
	}
yy195:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy195;
	}
#line 331 "parse/lex.re"
	{
        BlockNameList *l = alc.alloct<BlockNameList>(1);
        l->name = newcstr(tok + 1, cur, alc);
        l->next = NULL;
        *ptail = l;
        ptail = &l->next;

        // Check that the added name is unique.
        for (const BlockNameList *p = *phead; p != l; p = p->next) {
            if (strcmp(p->name, l->name) == 0) {
                msg.error(cur_loc(), "duplicate block '%s' on the list", p->name);
                return false;
            }
        }

        goto loop;
    }
#line 1408 "parse/lex.cc"
}
#line 348 "parse/lex.re"

}

bool Scanner::lex_block_end(Output &out, bool allow_garbage)
{
    bool multiline = false;
loop:

#line 1419 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy199;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy197;
		if (yych <= '\n') goto yy200;
	} else {
		if (yych <= '\r') goto yy201;
		if (yych == '*') goto yy202;
	}
yy197:
	++cur;
yy198:
#line 356 "parse/lex.re"
	{
        if (allow_garbage && !is_eof()) goto loop;
        msg.error(cur_loc(), "ill-formed end of block: expected optional"
            " whitespaces followed by `*" "/`");
        return false;
    }
#line 1478 "parse/lex.cc"
yy199:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy199;
	}
#line 366 "parse/lex.re"
	{ goto loop; }
#line 1488 "parse/lex.cc"
yy200:
	++cur;
#line 367 "parse/lex.re"
	{ next_line(); multiline = true; goto loop; }
#line 1493 "parse/lex.cc"
yy201:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy200;
	goto yy198;
yy202:
	yych = (unsigned char)*++cur;
	if (yych != '/') goto yy198;
	++cur;
#line 362 "parse/lex.re"
	{
        if (multiline) out.wdelay_stmt(0, code_line_info_input(out.allocator, cur_loc()));
        return true;
    }
#line 1507 "parse/lex.cc"
}
#line 368 "parse/lex.re"

}

bool Scanner::lex_block(Output &out, CodeKind kind, uint32_t indent, uint32_t mask)
{
    code_alc_t &alc = out.allocator;
    const char *fmt = NULL, *sep = NULL;
    BlockNameList *blocks;

    out.wraw(tok, ptr, !globopts->iFlag);
    if (!lex_name_list(alc, &blocks)) return false;

loop:

#line 1524 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 9) { if (!fill(9)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy205;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy206;
		} else {
			if (yych == '\r') goto yy207;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy208;
			if (yych >= 'f') goto yy209;
		} else {
			if (yych == 's') goto yy210;
		}
	}
	++cur;
yy204:
#line 382 "parse/lex.re"
	{
        msg.error(cur_loc(), "ill-formed directive: expected optional "
            "configurations followed by the end of block `*" "/`");
        return false;
    }
#line 1588 "parse/lex.cc"
yy205:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy205;
	}
#line 406 "parse/lex.re"
	{ goto loop; }
#line 1598 "parse/lex.cc"
yy206:
	++cur;
#line 408 "parse/lex.re"
	{ next_line(); goto loop; }
#line 1603 "parse/lex.cc"
yy207:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy206;
	goto yy204;
yy208:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy211;
	goto yy204;
yy209:
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'o') goto yy212;
	goto yy204;
yy210:
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'e') goto yy214;
	goto yy204;
yy211:
	++cur;
#line 410 "parse/lex.re"
	{
        out.wdelay_stmt(0, code_line_info_output(alc));
        out.wdelay_stmt(indent, code_fmt(alc, kind, blocks, fmt, sep));
        out.wdelay_stmt(0, code_line_info_input(alc, cur_loc()));
        return true;
    }
#line 1629 "parse/lex.cc"
yy212:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy215;
yy213:
	cur = mar;
	goto yy204;
yy214:
	yych = (unsigned char)*++cur;
	if (yych == 'p') goto yy216;
	goto yy213;
yy215:
	yych = (unsigned char)*++cur;
	if (yych == 'm') goto yy217;
	goto yy213;
yy216:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy218;
	goto yy213;
yy217:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy219;
	goto yy213;
yy218:
	yych = (unsigned char)*++cur;
	if (yych == 'r') goto yy220;
	goto yy213;
yy219:
	yych = (unsigned char)*++cur;
	if (yych == 't') goto yy221;
	goto yy213;
yy220:
	yych = (unsigned char)*++cur;
	if (yych == 'a') goto yy222;
	goto yy213;
yy221:
	++cur;
#line 388 "parse/lex.re"
	{
        if ((mask & DCONF_FORMAT) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'format'");
            return false;
        }
        fmt = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1675 "parse/lex.cc"
yy222:
	yych = (unsigned char)*++cur;
	if (yych != 't') goto yy213;
	yych = (unsigned char)*++cur;
	if (yych != 'o') goto yy213;
	yych = (unsigned char)*++cur;
	if (yych != 'r') goto yy213;
	++cur;
#line 397 "parse/lex.re"
	{
        if ((mask & DCONF_SEPARATOR) == 0) {
            msg.error(cur_loc(), "unexpected configuration 'separator'");
            return false;
        }
        sep = copystr(lex_conf_string(), alc);
        goto loop;
    }
#line 1693 "parse/lex.cc"
}
#line 416 "parse/lex.re"

}

int Scanner::scan()
{
    const char *p, *x, *y;
scan:
    tok = cur;
    location = cur_loc();

#line 1706 "parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 9) { if (!fill(9)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 16) {
		goto yy226;
	}
	if (yych <= '9') {
		if (yych <= '$') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy224;
				if (yych <= '\n') goto yy227;
				if (yych >= '\r') goto yy229;
			} else {
				if (yych <= '!') {
					if (yych >= ' ') goto yy230;
				} else {
					if (yych <= '"') goto yy231;
					if (yych <= '#') goto yy232;
					goto yy233;
				}
			}
		} else {
			if (yych <= '*') {
				if (yych <= '&') {
					if (yych <= '%') goto yy235;
				} else {
					if (yych <= '\'') goto yy236;
					if (yych <= ')') goto yy233;
					goto yy237;
				}
			} else {
				if (yych <= '-') {
					if (yych <= '+') goto yy233;
				} else {
					if (yych <= '.') goto yy238;
					if (yych <= '/') goto yy239;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '=') {
				if (yych <= ':') goto yy240;
				if (yych <= ';') goto yy233;
				if (yych <= '<') goto yy241;
				goto yy242;
			} else {
				if (yych <= '?') {
					if (yych >= '?') goto yy233;
				} else {
					if (yych <= '@') goto yy232;
					if (yych <= 'Z') goto yy243;
					goto yy245;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy233;
				} else {
					if (yych != '`') goto yy243;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy246;
					goto yy243;
				} else {
					if (yych <= '{') goto yy247;
					if (yych <= '|') goto yy233;
				}
			}
		}
	}
yy224:
	++cur;
yy225:
#line 571 "parse/lex.re"
	{
        msg.error(tok_loc(), "unexpected character: '%c'", *tok);
        exit(1);
    }
#line 1824 "parse/lex.cc"
yy226:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 16) {
		goto yy226;
	}
#line 553 "parse/lex.re"
	{ goto scan; }
#line 1834 "parse/lex.cc"
yy227:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy249;
	} else {
		if (yych <= ' ') goto yy249;
		if (yych == '#') goto yy251;
	}
yy228:
#line 560 "parse/lex.re"
	{
        next_line();
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1856 "parse/lex.cc"
yy229:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy227;
	goto yy225;
yy230:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == 'i') goto yy252;
	if (yych == 'u') goto yy253;
	goto yy225;
yy231:
	++cur;
#line 443 "parse/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1871 "parse/lex.cc"
yy232:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy225;
		if (yych <= 'Z') goto yy254;
		goto yy225;
	} else {
		if (yych == '`') goto yy225;
		if (yych <= 'z') goto yy254;
		goto yy225;
	}
yy233:
	++cur;
yy234:
#line 452 "parse/lex.re"
	{ return *tok; }
#line 1888 "parse/lex.cc"
yy235:
	yych = (unsigned char)*++cur;
	if (yych == '}') goto yy256;
	goto yy225;
yy236:
	++cur;
#line 442 "parse/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1897 "parse/lex.cc"
yy237:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy256;
	goto yy234;
yy238:
	++cur;
#line 548 "parse/lex.re"
	{
        yylval.regexp = ast_dot(tok_loc());
        return TOKEN_REGEXP;
    }
#line 1909 "parse/lex.cc"
yy239:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy257;
	if (yych == '/') goto yy258;
	goto yy234;
yy240:
	yych = (unsigned char)*++cur;
	if (yych == '=') goto yy259;
	goto yy225;
yy241:
	++cur;
#line 435 "parse/lex.re"
	{ return lex_clist(); }
#line 1923 "parse/lex.cc"
yy242:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '>') goto yy261;
	goto yy234;
yy243:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy244:
	if (yybm[0+yych] & 32) {
		goto yy243;
	}
#line 503 "parse/lex.re"
	{
        if (!globopts->FFlag || lex_namedef_context_re2c()) {
            yylval.str = newstr(tok, cur);
            return TOKEN_ID;
        }
        else if (lex_namedef_context_flex()) {
            yylval.str = newstr(tok, cur);
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            // consume one character, otherwise we risk breaking operator
            // precedence in cases like ab*: it should be a(b)*, not (ab)*
            cur = tok + 1;

            ASTChar c = {static_cast<uint8_t>(tok[0]), tok_loc()};
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            str->push_back(c);
            yylval.regexp = ast_str(tok_loc(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1960 "parse/lex.cc"
yy245:
	yych = (unsigned char)*++cur;
	if (yych == '^') goto yy262;
#line 444 "parse/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1966 "parse/lex.cc"
yy246:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy263;
	goto yy244;
yy247:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 64) {
		goto yy266;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy264;
		if (yych >= 'A') goto yy267;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy267;
		} else {
			if (yych <= '`') goto yy248;
			if (yych <= 'z') goto yy267;
		}
	}
yy248:
#line 427 "parse/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1991 "parse/lex.cc"
yy249:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy249;
	} else {
		if (yych <= ' ') goto yy249;
		if (yych == '#') goto yy251;
	}
yy250:
	cur = mar;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy228;
			} else {
				goto yy225;
			}
		} else {
			if (yyaccept == 2) {
				goto yy234;
			} else {
				goto yy248;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy260;
			} else {
				goto yy265;
			}
		} else {
			if (yyaccept == 6) {
				goto yy280;
			} else {
				goto yy299;
			}
		}
	}
yy251:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy251;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy251;
		if (yych == 'l') goto yy268;
		goto yy250;
	}
yy252:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy269;
	goto yy250;
yy253:
	yych = (unsigned char)*++cur;
	if (yych == 's') goto yy270;
	goto yy250;
yy254:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy255;
		if (yych <= '9') goto yy254;
		if (yych >= 'A') goto yy254;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy254;
		} else {
			if (yych <= '`') goto yy255;
			if (yych <= 'z') goto yy254;
		}
	}
yy255:
#line 447 "parse/lex.re"
	{
        yylval.regexp = ast_tag(tok_loc(), newstr(tok + 1, cur), tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 2075 "parse/lex.cc"
yy256:
	++cur;
#line 440 "parse/lex.re"
	{ tok = cur; return 0; }
#line 2080 "parse/lex.cc"
yy257:
	++cur;
#line 438 "parse/lex.re"
	{ lex_c_comment(); goto scan; }
#line 2085 "parse/lex.cc"
yy258:
	++cur;
#line 437 "parse/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 2090 "parse/lex.cc"
yy259:
	yyaccept = 4;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '>') goto yy261;
yy260:
#line 428 "parse/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 2098 "parse/lex.cc"
yy261:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '@') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy250;
			goto yy261;
		} else {
			if (yych == ' ') goto yy261;
			goto yy250;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') {
				yyt1 = cur;
				goto yy271;
			}
			if (yych <= '^') goto yy250;
			yyt1 = cur;
			goto yy271;
		} else {
			if (yych <= '`') goto yy250;
			if (yych <= 'z') {
				yyt1 = cur;
				goto yy271;
			}
			goto yy250;
		}
	}
yy262:
	++cur;
#line 445 "parse/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 2133 "parse/lex.cc"
yy263:
	yych = (unsigned char)*++cur;
	if (yych == '2') goto yy273;
	goto yy244;
yy264:
	++cur;
yy265:
#line 486 "parse/lex.re"
	{
        msg.error(tok_loc(), "illegal closure form, use '{n}', '{n,}', '{n,m}' "
            "where n and m are numbers");
        exit(1);
    }
#line 2147 "parse/lex.cc"
yy266:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy266;
	}
	if (yych == ',') {
		yyt1 = cur;
		goto yy274;
	}
	if (yych == '}') goto yy275;
	goto yy250;
yy267:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy250;
			goto yy267;
		} else {
			if (yych <= '@') goto yy250;
			if (yych <= 'Z') goto yy267;
			goto yy250;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy250;
			goto yy267;
		} else {
			if (yych == '}') goto yy276;
			goto yy250;
		}
	}
yy268:
	yych = (unsigned char)*++cur;
	if (yych == 'i') goto yy277;
	goto yy250;
yy269:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy278;
	goto yy250;
yy270:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy279;
	goto yy250;
yy271:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy272;
		if (yych <= '9') goto yy271;
		if (yych >= 'A') goto yy271;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy271;
		} else {
			if (yych <= '`') goto yy272;
			if (yych <= 'z') goto yy271;
		}
	}
yy272:
	p = yyt1;
#line 430 "parse/lex.re"
	{
        yylval.str = newstr(p, cur);
        return tok[0] == ':' ? TOKEN_CJUMP : TOKEN_CNEXT;
    }
#line 2218 "parse/lex.cc"
yy273:
	yych = (unsigned char)*++cur;
	if (yych == 'c') goto yy281;
	goto yy244;
yy274:
	yyaccept = 5;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy265;
	if (yych <= '9') goto yy282;
	if (yych == '}') goto yy283;
	goto yy265;
yy275:
	++cur;
#line 454 "parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition count overflow");
            exit(1);
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 2241 "parse/lex.cc"
yy276:
	++cur;
#line 492 "parse/lex.re"
	{
        if (!globopts->FFlag) {
            msg.error(tok_loc(), "curly braces for names only allowed with -F switch");
            exit(1);
        }
        yylval.str = newstr(tok + 1, cur - 1);
        return TOKEN_ID;
    }
#line 2253 "parse/lex.cc"
yy277:
	yych = (unsigned char)*++cur;
	if (yych == 'n') goto yy284;
	goto yy250;
yy278:
	yych = (unsigned char)*++cur;
	if (yych == 'l') goto yy285;
	goto yy250;
yy279:
	yyaccept = 6;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == ':') goto yy286;
yy280:
#line 541 "parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed use directive: expected `!use`"
            " followed by a colon, a block name, optional spaces, a semicolon,"
            " and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2274 "parse/lex.cc"
yy281:
	yych = (unsigned char)*++cur;
	if (yych == ':') goto yy287;
	goto yy244;
yy282:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '/') goto yy250;
	if (yych <= '9') goto yy282;
	if (yych == '}') goto yy288;
	goto yy250;
yy283:
	++cur;
#line 477 "parse/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 2298 "parse/lex.cc"
yy284:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy289;
	goto yy250;
yy285:
	yych = (unsigned char)*++cur;
	if (yych == 'u') goto yy290;
	goto yy250;
yy286:
	yych = (unsigned char)*++cur;
	if (yych <= '^') {
		if (yych <= '@') goto yy250;
		if (yych <= 'Z') {
			yyt1 = cur;
			goto yy291;
		}
		goto yy250;
	} else {
		if (yych == '`') goto yy250;
		if (yych <= 'z') {
			yyt1 = cur;
			goto yy291;
		}
		goto yy250;
	}
yy287:
	++cur;
#line 501 "parse/lex.re"
	{ return TOKEN_CONF; }
#line 2328 "parse/lex.cc"
yy288:
	++cur;
	p = yyt1;
#line 463 "parse/lex.re"
	{
        if (!s_to_u32_unsafe(tok + 1, p, yylval.bounds.min)) {
            msg.error(tok_loc(), "repetition lower bound overflow");
            exit(1);
        } else if (!s_to_u32_unsafe(p + 1, cur - 1, yylval.bounds.max)) {
            msg.error(tok_loc(), "repetition upper bound overflow");
            exit(1);
        } else if (yylval.bounds.min > yylval.bounds.max) {
            msg.error(tok_loc(), "repetition lower bound exceeds upper bound");
            exit(1);
        }
        return TOKEN_CLOSESIZE;
    }
#line 2346 "parse/lex.cc"
yy289:
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy293;
	if (yych <= '9') goto yy250;
	goto yy293;
yy290:
	yych = (unsigned char)*++cur;
	if (yych == 'd') goto yy294;
	goto yy250;
yy291:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ':') {
		if (yych <= 0x1F) {
			if (yych == '\t') {
				yyt2 = cur;
				goto yy295;
			}
			goto yy250;
		} else {
			if (yych <= ' ') {
				yyt2 = cur;
				goto yy295;
			}
			if (yych <= '/') goto yy250;
			if (yych <= '9') goto yy291;
			goto yy250;
		}
	} else {
		if (yych <= '^') {
			if (yych <= ';') {
				yyt2 = cur;
				goto yy296;
			}
			if (yych <= '@') goto yy250;
			if (yych <= 'Z') goto yy291;
			goto yy250;
		} else {
			if (yych == '`') goto yy250;
			if (yych <= 'z') goto yy291;
			goto yy250;
		}
	}
yy292:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy293:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy292;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy292;
		if (yych <= '0') goto yy250;
		if (yych <= '9') {
			yyt1 = cur;
			goto yy297;
		}
		goto yy250;
	}
yy294:
	yych = (unsigned char)*++cur;
	if (yych == 'e') goto yy298;
	goto yy250;
yy295:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy295;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy295;
		if (yych != ';') goto yy250;
	}
yy296:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy250;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy300;
		}
		if (yych <= '\f') goto yy250;
		yyt3 = cur;
		goto yy300;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			yyt3 = cur;
			goto yy300;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy301;
			}
			goto yy250;
		}
	}
yy297:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy250;
			goto yy302;
		} else {
			if (yych <= '\n') goto yy303;
			if (yych <= '\f') goto yy250;
			goto yy304;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			goto yy302;
		} else {
			if (yych <= '/') goto yy250;
			if (yych <= '9') goto yy297;
			goto yy250;
		}
	}
yy298:
	yyaccept = 7;
	yych = (unsigned char)*(mar = ++cur);
	if (yych == '\t') goto yy305;
	if (yych == ' ') goto yy305;
yy299:
#line 530 "parse/lex.re"
	{
        msg.error(tok_loc(), "ill-formed include directive: expected `!include`"
            " followed by spaces, a double-quoted file path, optional spaces, a"
            " semicolon, and finally a space, a newline, or the end of block");
        exit(1);
    }
#line 2483 "parse/lex.cc"
yy300:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 537 "parse/lex.re"
	{
        yylval.str = newstr(x, y); // save the name of the used block
        return TOKEN_BLOCK;
    }
#line 2494 "parse/lex.cc"
yy301:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy300;
	goto yy250;
yy302:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy302;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy302;
		if (yych == '"') goto yy306;
		goto yy250;
	}
yy303:
	++cur;
	cur = yyt1;
#line 555 "parse/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 2519 "parse/lex.cc"
yy304:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy303;
	goto yy250;
yy305:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy305;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy305;
		if (yych == '"') {
			yyt1 = cur;
			goto yy307;
		}
		goto yy250;
	}
yy306:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy306;
	}
	if (yych <= '\n') goto yy250;
	if (yych <= '"') goto yy308;
	goto yy309;
yy307:
	++cur;
	if ((lim - cur) < 4) { if (!fill(4)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= 0x00) goto yy250;
		if (yych == '\n') goto yy250;
		goto yy307;
	} else {
		if (yych <= '"') goto yy310;
		if (yych == '\\') goto yy311;
		goto yy307;
	}
yy308:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy303;
	if (yych == '\r') goto yy304;
	goto yy250;
yy309:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy250;
	if (yych == '\n') goto yy250;
	goto yy306;
yy310:
	yych = (unsigned char)*++cur;
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt2 = cur;
			goto yy312;
		}
		goto yy250;
	} else {
		if (yych <= ' ') {
			yyt2 = cur;
			goto yy312;
		}
		if (yych == ';') {
			yyt2 = cur;
			goto yy313;
		}
		goto yy250;
	}
yy311:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy250;
	if (yych == '\n') goto yy250;
	goto yy307;
yy312:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy312;
		goto yy250;
	} else {
		if (yych <= ' ') goto yy312;
		if (yych != ';') goto yy250;
	}
yy313:
	yych = (unsigned char)*++cur;
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy250;
		if (yych <= '\n') {
			yyt3 = cur;
			goto yy314;
		}
		if (yych <= '\f') goto yy250;
		yyt3 = cur;
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy250;
			yyt3 = cur;
		} else {
			if (yych == '*') {
				yyt3 = cur;
				goto yy315;
			}
			goto yy250;
		}
	}
yy314:
	++cur;
	x = yyt1;
	y = yyt2;
	cur = yyt3;
#line 526 "parse/lex.re"
	{
        include(getstr(x + 1, y - 1), tok);
        goto scan;
    }
#line 2643 "parse/lex.cc"
yy315:
	yych = (unsigned char)*++cur;
	if (yych == '/') goto yy314;
	goto yy250;
}
#line 575 "parse/lex.re"

}

bool Scanner::lex_namedef_context_re2c()
{

#line 2656 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0x1F) {
		if (yych == '\t') {
			yyt1 = cur;
			goto yy318;
		}
	} else {
		if (yych <= ' ') {
			yyt1 = cur;
			goto yy318;
		}
		if (yych == '=') {
			yyt1 = cur;
			goto yy320;
		}
	}
yy317:
#line 582 "parse/lex.re"
	{ return false; }
#line 2713 "parse/lex.cc"
yy318:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy318;
	}
	if (yych == '=') goto yy320;
yy319:
	cur = mar;
	goto yy317;
yy320:
	yych = (unsigned char)*++cur;
	if (yych == '>') goto yy319;
	++cur;
	cur = yyt1;
#line 581 "parse/lex.re"
	{ return true; }
#line 2732 "parse/lex.cc"
}
#line 583 "parse/lex.re"

}

bool Scanner::lex_namedef_context_flex()
{

#line 2741 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == '\t') {
		yyt1 = cur;
		goto yy322;
	}
	if (yych == ' ') {
		yyt1 = cur;
		goto yy322;
	}
#line 591 "parse/lex.re"
	{ return false; }
#line 2790 "parse/lex.cc"
yy322:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy322;
	}
	if (yych <= '<') {
		if (yych == ':') goto yy323;
	} else {
		if (yych <= '=') goto yy323;
		if (yych == '{') goto yy323;
	}
	cur = yyt1;
#line 590 "parse/lex.re"
	{ return true; }
#line 2807 "parse/lex.cc"
yy323:
	++cur;
	cur = yyt1;
#line 589 "parse/lex.re"
	{ return false; }
#line 2813 "parse/lex.cc"
}
#line 592 "parse/lex.re"

}

int Scanner::lex_clist()
{
    int kind = TOKEN_CLIST;
    CondList *cl = new CondList;

#line 2824 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	goto yy324;
yy325:
	++cur;
yy324:
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy325;
	}
	if (yych <= 0x1F) goto yy326;
	if (yych <= '!') goto yy327;
	if (yych == '>') goto yy328;
yy326:
#line 602 "parse/lex.re"
	{ goto cond; }
#line 2876 "parse/lex.cc"
yy327:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == '\t') goto yy327;
	if (yych == ' ') goto yy327;
#line 600 "parse/lex.re"
	{ kind = TOKEN_CSETUP; goto cond; }
#line 2885 "parse/lex.cc"
yy328:
	++cur;
#line 601 "parse/lex.re"
	{ kind = TOKEN_CZERO; goto end; }
#line 2890 "parse/lex.cc"
}
#line 603 "parse/lex.re"

cond:
    tok = cur;

#line 2897 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0, 128, 
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 'Z') {
		if (yych == '*') goto yy331;
		if (yych >= 'A') goto yy332;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy332;
		} else {
			if (yych <= '`') goto yy330;
			if (yych <= 'z') goto yy332;
		}
	}
yy330:
	++cur;
#line 609 "parse/lex.re"
	{ goto error; }
#line 2951 "parse/lex.cc"
yy331:
	++cur;
#line 608 "parse/lex.re"
	{ if (!cl->empty()) goto error; cl->insert("*"); goto next; }
#line 2956 "parse/lex.cc"
yy332:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy332;
	}
#line 607 "parse/lex.re"
	{ cl->insert(getstr(tok, cur)); goto next; }
#line 2966 "parse/lex.cc"
}
#line 610 "parse/lex.re"

next:

#line 2972 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy335;
		if (yych >= ' ') goto yy335;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy336;
		} else {
			if (yych == '>') goto yy337;
		}
	}
	++cur;
yy334:
#line 615 "parse/lex.re"
	{ goto error; }
#line 3025 "parse/lex.cc"
yy335:
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= ' ') {
		if (yych == '\t') goto yy338;
		if (yych <= 0x1F) goto yy334;
		goto yy338;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy334;
		} else {
			if (yych == '>') goto yy337;
			goto yy334;
		}
	}
yy336:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy336;
	}
#line 613 "parse/lex.re"
	{ goto cond; }
#line 3049 "parse/lex.cc"
yy337:
	++cur;
#line 614 "parse/lex.re"
	{ goto end; }
#line 3054 "parse/lex.cc"
yy338:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= ' ') {
		if (yych == '\t') goto yy338;
		if (yych >= ' ') goto yy338;
	} else {
		if (yych <= ',') {
			if (yych >= ',') goto yy336;
		} else {
			if (yych == '>') goto yy337;
		}
	}
	cur = mar;
	goto yy334;
}
#line 616 "parse/lex.re"

end:
    yylval.clist = cl;
    return kind;
error:
    delete cl;
    msg.error(cur_loc(), "syntax error in condition list");
    exit(1);
}

void Scanner::lex_code_indented() {
    const loc_t &loc = tok_loc();
    tok = cur;
code:

#line 3088 "parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy340;
			if (yych == '\n') goto yy343;
			goto yy341;
		} else {
			if (yych <= '\r') goto yy344;
			if (yych == '"') goto yy345;
			goto yy341;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy345;
			if (yych == '/') goto yy346;
			goto yy341;
		} else {
			if (yych == '|') goto yy341;
			if (yych <= '}') goto yy347;
			goto yy341;
		}
	}
yy340:
	++cur;
#line 631 "parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3118 "parse/lex.cc"
yy341:
	++cur;
yy342:
#line 637 "parse/lex.re"
	{ goto code; }
#line 3124 "parse/lex.cc"
yy343:
	++cur;
#line 632 "parse/lex.re"
	{ next_line(); goto indent; }
#line 3129 "parse/lex.cc"
yy344:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy343;
	goto yy342;
yy345:
	++cur;
#line 635 "parse/lex.re"
	{ try_lex_string_in_code(cur[-1]); goto code; }
#line 3138 "parse/lex.cc"
yy346:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy348;
	if (yych == '/') goto yy349;
	goto yy342;
yy347:
	++cur;
#line 636 "parse/lex.re"
	{ msg.error(cur_loc(), "Curly braces are not allowed after ':='"); exit(1); }
#line 3148 "parse/lex.cc"
yy348:
	++cur;
#line 634 "parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3153 "parse/lex.cc"
yy349:
	++cur;
#line 633 "parse/lex.re"
	{ lex_cpp_comment(); goto indent; }
#line 3158 "parse/lex.cc"
}
#line 638 "parse/lex.re"

indent:

#line 3164 "parse/lex.cc"
{
	unsigned char yych;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy351;
		if (yych <= '\n') goto yy352;
	} else {
		if (yych <= '\r') goto yy352;
		if (yych == ' ') goto yy352;
	}
yy351:
#line 642 "parse/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        char *p = cur;
        while (p > tok && isspace(p[-1])) --p;
        yylval.semact = new SemAct(loc, getstr(tok, p));
        return;
    }
#line 3185 "parse/lex.cc"
yy352:
	++cur;
	cur -= 1;
#line 641 "parse/lex.re"
	{ goto code; }
#line 3191 "parse/lex.cc"
}
#line 649 "parse/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const loc_t &loc = tok_loc();
    uint32_t depth = 1;
code:

#line 3203 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy354;
			if (yych == '\n') goto yy357;
			goto yy355;
		} else {
			if (yych <= '\r') goto yy359;
			if (yych == '"') goto yy360;
			goto yy355;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy360;
			if (yych == '/') goto yy361;
			goto yy355;
		} else {
			if (yych <= '{') goto yy362;
			if (yych == '}') goto yy363;
			goto yy355;
		}
	}
yy354:
	++cur;
#line 669 "parse/lex.re"
	{ fail_if_eof(); goto code; }
#line 3267 "parse/lex.cc"
yy355:
	++cur;
yy356:
#line 673 "parse/lex.re"
	{ goto code; }
#line 3273 "parse/lex.cc"
yy357:
	yych = (unsigned char)*(mar = ++cur);
	if (yybm[0+yych] & 32) {
		goto yy364;
	}
	if (yych == '#') goto yy366;
yy358:
#line 668 "parse/lex.re"
	{ next_line(); goto code; }
#line 3283 "parse/lex.cc"
yy359:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy357;
	goto yy356;
yy360:
	++cur;
#line 672 "parse/lex.re"
	{ try_lex_string_in_code(cur[-1]); goto code; }
#line 3292 "parse/lex.cc"
yy361:
	yych = (unsigned char)*++cur;
	if (yych == '*') goto yy367;
	if (yych == '/') goto yy368;
	goto yy356;
yy362:
	++cur;
#line 666 "parse/lex.re"
	{ ++depth; goto code; }
#line 3302 "parse/lex.cc"
yy363:
	++cur;
#line 658 "parse/lex.re"
	{
        if (--depth == 0) {
            yylval.semact = new SemAct(loc, getstr(tok, cur));
            return;
        }
        goto code;
    }
#line 3313 "parse/lex.cc"
yy364:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 32) {
		goto yy364;
	}
	if (yych == '#') goto yy366;
yy365:
	cur = mar;
	goto yy358;
yy366:
	++cur;
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy366;
		goto yy365;
	} else {
		if (yych <= ' ') goto yy366;
		if (yych == 'l') goto yy369;
		goto yy365;
	}
yy367:
	++cur;
#line 670 "parse/lex.re"
	{ lex_c_comment(); goto code; }
#line 3341 "parse/lex.cc"
yy368:
	++cur;
#line 671 "parse/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 3346 "parse/lex.cc"
yy369:
	yych = (unsigned char)*++cur;
	if (yych != 'i') goto yy365;
	yych = (unsigned char)*++cur;
	if (yych != 'n') goto yy365;
	yych = (unsigned char)*++cur;
	if (yych != 'e') goto yy365;
	yych = (unsigned char)*++cur;
	if (yych <= '0') goto yy371;
	if (yych <= '9') goto yy365;
	goto yy371;
yy370:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy371:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy370;
		goto yy365;
	} else {
		if (yych <= ' ') goto yy370;
		if (yych <= '0') goto yy365;
		if (yych >= ':') goto yy365;
		yyt1 = cur;
	}
yy372:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy372;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy365;
		if (yych <= '\t') goto yy373;
		if (yych <= '\n') goto yy374;
		goto yy365;
	} else {
		if (yych <= '\r') goto yy375;
		if (yych != ' ') goto yy365;
	}
yy373:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy373;
		goto yy365;
	} else {
		if (yych <= ' ') goto yy373;
		if (yych == '"') goto yy376;
		goto yy365;
	}
yy374:
	++cur;
	cur = yyt1;
#line 667 "parse/lex.re"
	{ set_sourceline (); goto code; }
#line 3405 "parse/lex.cc"
yy375:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy374;
	goto yy365;
yy376:
	++cur;
	if ((lim - cur) < 3) { if (!fill(3)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 128) {
		goto yy376;
	}
	if (yych <= '\n') goto yy365;
	if (yych >= '#') goto yy377;
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy374;
	if (yych == '\r') goto yy375;
	goto yy365;
yy377:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy365;
	if (yych == '\n') goto yy365;
	goto yy376;
}
#line 674 "parse/lex.re"

}

void Scanner::try_lex_string_in_code(char quote)
{
    // We need to lex string literals in code blocks because they may contain closing
    // brace symbol that would otherwise be erroneously lexed as a real closing brace.
    //
    // However, single quote in Rust may be either the beginning of a char literal as in
    // '\u{1F600}', or a standalone one as in 'label. In the latter case trying to lex a
    // generic string literal will consume a fragment of the file until the next single
    // quote (if any) and result in either a spurios parse error, or incorrect generated
    // code. Therefore in Rust we try to lex a char literal, or else consume the quote.

    if (globopts->lang != LANG_RUST || quote != '\'') {
        lex_string(quote);
        return;
    }

    // Rust spec (literals): https://doc.rust-lang.org/reference/tokens.html#literals
    // Rust spec (input encoding): https://doc.rust-lang.org/reference/input-format.html

#line 3454 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128, 128, 128, 128, 128, 128,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((lim - cur) < 5) { if (!fill(5)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych <= 0xDF) {
		if (yych <= '\\') {
			if (yych <= '[') goto yy380;
			goto yy382;
		} else {
			if (yych <= 0x7F) goto yy380;
			if (yych >= 0xC2) goto yy383;
		}
	} else {
		if (yych <= 0xF0) {
			if (yych <= 0xE0) goto yy384;
			if (yych <= 0xEF) goto yy385;
			goto yy386;
		} else {
			if (yych <= 0xF3) goto yy387;
			if (yych <= 0xF4) goto yy388;
		}
	}
yy379:
#line 702 "parse/lex.re"
	{ return; }
#line 3514 "parse/lex.cc"
yy380:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy389;
yy381:
	cur = mar;
	goto yy379;
yy382:
	yych = (unsigned char)*++cur;
	if (yych <= 'm') {
		if (yych <= '\'') {
			if (yych == '"') goto yy380;
			if (yych <= '&') goto yy381;
			goto yy390;
		} else {
			if (yych <= '0') {
				if (yych <= '/') goto yy381;
				goto yy380;
			} else {
				if (yych == '\\') goto yy380;
				goto yy381;
			}
		}
	} else {
		if (yych <= 's') {
			if (yych <= 'n') goto yy380;
			if (yych == 'r') goto yy380;
			goto yy381;
		} else {
			if (yych <= 'u') {
				if (yych <= 't') goto yy380;
				goto yy391;
			} else {
				if (yych == 'x') goto yy392;
				goto yy381;
			}
		}
	}
yy383:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy381;
	if (yych <= 0xBF) goto yy380;
	goto yy381;
yy384:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy381;
	if (yych <= 0xBF) goto yy383;
	goto yy381;
yy385:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy381;
	if (yych <= 0xBF) goto yy383;
	goto yy381;
yy386:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy381;
	if (yych <= 0xBF) goto yy385;
	goto yy381;
yy387:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy381;
	if (yych <= 0xBF) goto yy385;
	goto yy381;
yy388:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy381;
	if (yych <= 0x8F) goto yy385;
	goto yy381;
yy389:
	++cur;
	goto yy379;
yy390:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy389;
	goto yy379;
yy391:
	yych = (unsigned char)*++cur;
	if (yych == '{') goto yy393;
	goto yy381;
yy392:
	yych = (unsigned char)*++cur;
	if (yych == '\'') goto yy381;
	goto yy395;
yy393:
	yych = (unsigned char)*++cur;
	if (yych == '}') goto yy381;
	goto yy397;
yy394:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy395:
	if (yybm[0+yych] & 128) {
		goto yy394;
	}
	if (yych == '\'') goto yy389;
	goto yy381;
yy396:
	++cur;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy397:
	if (yych <= 'F') {
		if (yych <= '/') goto yy381;
		if (yych <= '9') goto yy396;
		if (yych <= '@') goto yy381;
		goto yy396;
	} else {
		if (yych <= 'f') {
			if (yych <= '`') goto yy381;
			goto yy396;
		} else {
			if (yych == '}') goto yy380;
			goto yy381;
		}
	}
}
#line 703 "parse/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 3639 "parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy399;
			if (yych <= '\t') goto yy400;
			goto yy402;
		} else {
			if (yych == '\r') goto yy403;
			goto yy400;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy404;
			if (yych <= '&') goto yy400;
			goto yy404;
		} else {
			if (yych == '\\') goto yy405;
			goto yy400;
		}
	}
yy399:
	++cur;
#line 713 "parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3667 "parse/lex.cc"
yy400:
	++cur;
yy401:
#line 714 "parse/lex.re"
	{ goto loop; }
#line 3673 "parse/lex.cc"
yy402:
	++cur;
#line 712 "parse/lex.re"
	{ next_line(); goto loop; }
#line 3678 "parse/lex.cc"
yy403:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy402;
	goto yy401;
yy404:
	++cur;
#line 710 "parse/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 3687 "parse/lex.cc"
yy405:
	yych = (unsigned char)*++cur;
	if (yych <= '&') {
		if (yych != '"') goto yy401;
	} else {
		if (yych <= '\'') goto yy406;
		if (yych != '\\') goto yy401;
	}
yy406:
	++cur;
#line 711 "parse/lex.re"
	{ goto loop; }
#line 3700 "parse/lex.cc"
}
#line 715 "parse/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 3710 "parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy408;
		if (yych == '\n') goto yy411;
		goto yy409;
	} else {
		if (yych <= '\r') goto yy412;
		if (yych == '*') goto yy413;
		goto yy409;
	}
yy408:
	++cur;
#line 724 "parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3728 "parse/lex.cc"
yy409:
	++cur;
yy410:
#line 725 "parse/lex.re"
	{ goto loop; }
#line 3734 "parse/lex.cc"
yy411:
	++cur;
#line 723 "parse/lex.re"
	{ next_line(); goto loop; }
#line 3739 "parse/lex.cc"
yy412:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy411;
	goto yy410;
yy413:
	yych = (unsigned char)*++cur;
	if (yych != '/') goto yy410;
	++cur;
#line 722 "parse/lex.re"
	{ return; }
#line 3750 "parse/lex.cc"
}
#line 726 "parse/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 3760 "parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy415;
		if (yych <= '\t') goto yy416;
		goto yy418;
	} else {
		if (yych == '\r') goto yy419;
		goto yy416;
	}
yy415:
	++cur;
#line 734 "parse/lex.re"
	{ fail_if_eof(); goto loop; }
#line 3777 "parse/lex.cc"
yy416:
	++cur;
yy417:
#line 735 "parse/lex.re"
	{ goto loop; }
#line 3783 "parse/lex.cc"
yy418:
	++cur;
#line 733 "parse/lex.re"
	{ next_line(); return; }
#line 3788 "parse/lex.cc"
yy419:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy418;
	goto yy417;
}
#line 736 "parse/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l;
    const loc_t &loc0 = tok_loc();
    loc_t loc = cur_loc();
fst:
    tok = cur;

#line 3807 "parse/lex.cc"
{
	unsigned char yych;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych == ']') goto yy421;
#line 749 "parse/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 3815 "parse/lex.cc"
yy421:
	++cur;
#line 748 "parse/lex.re"
	{ return ast_cls(loc0, cls, neg); }
#line 3820 "parse/lex.cc"
}
#line 750 "parse/lex.re"

snd:

#line 3826 "parse/lex.cc"
{
	unsigned char yych;
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*(mar = cur);
	if (yych == '-') goto yy424;
yy423:
#line 753 "parse/lex.re"
	{ u = l; goto add; }
#line 3835 "parse/lex.cc"
yy424:
	yych = (unsigned char)*++cur;
	if (yych != ']') goto yy425;
	cur = mar;
	goto yy423;
yy425:
	++cur;
	cur -= 1;
#line 754 "parse/lex.re"
	{
        u = lex_cls_chr();
        if (l > u) {
            msg.warn.swapped_range(loc, l, u);
            std::swap(l, u);
        }
        goto add;
    }
#line 3853 "parse/lex.cc"
}
#line 762 "parse/lex.re"

add:
    cls->push_back(ASTRange(l, u, loc));
    loc = cur_loc();
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const loc_t &loc = cur_loc();
    #line 800 "parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 3871 "parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy427;
		if (yych == '\n') goto yy430;
		goto yy428;
	} else {
		if (yych <= '\r') goto yy431;
		if (yych == '\\') goto yy432;
		goto yy428;
	}
yy427:
	++cur;
#line 781 "parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 3890 "parse/lex.cc"
yy428:
	++cur;
yy429:
#line 783 "parse/lex.re"
	{ return decode(tok); }
#line 3896 "parse/lex.cc"
yy430:
	++cur;
#line 775 "parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 3901 "parse/lex.cc"
yy431:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy430;
	goto yy429;
yy432:
	yych = (unsigned char)*++cur;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy433;
				if (yych == '\n') goto yy430;
				goto yy434;
			} else {
				if (yych <= '\r') goto yy436;
				if (yych == '-') goto yy437;
				goto yy434;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy438;
				if (yych <= '7') goto yy440;
				if (yych <= 'T') goto yy434;
				goto yy441;
			} else {
				if (yych == 'X') goto yy443;
				if (yych <= '[') goto yy434;
				goto yy444;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy445;
				if (yych <= '`') goto yy434;
				if (yych <= 'a') goto yy446;
				goto yy447;
			} else {
				if (yych == 'f') goto yy448;
				if (yych <= 'm') goto yy434;
				goto yy449;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy450;
				if (yych <= 's') goto yy434;
				goto yy451;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy443;
					goto yy452;
				} else {
					if (yych == 'x') goto yy453;
					goto yy434;
				}
			}
		}
	}
yy433:
#line 778 "parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 3962 "parse/lex.cc"
yy434:
	++cur;
yy435:
#line 796 "parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 3971 "parse/lex.cc"
yy436:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy430;
	goto yy435;
yy437:
	++cur;
#line 794 "parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 3980 "parse/lex.cc"
yy438:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy439;
	if (yych <= '7') goto yy454;
yy439:
#line 777 "parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 3989 "parse/lex.cc"
yy440:
	++cur;
	goto yy439;
yy441:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy442;
		if (yych <= '9') goto yy456;
	} else {
		if (yych <= 'F') goto yy456;
		if (yych <= '`') goto yy442;
		if (yych <= 'f') goto yy456;
	}
yy442:
#line 776 "parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4007 "parse/lex.cc"
yy443:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy442;
		if (yych <= '9') goto yy457;
		goto yy442;
	} else {
		if (yych <= 'F') goto yy457;
		if (yych <= '`') goto yy442;
		if (yych <= 'f') goto yy457;
		goto yy442;
	}
yy444:
	++cur;
#line 793 "parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4025 "parse/lex.cc"
yy445:
	++cur;
#line 795 "parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4030 "parse/lex.cc"
yy446:
	++cur;
#line 786 "parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4035 "parse/lex.cc"
yy447:
	++cur;
#line 787 "parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4040 "parse/lex.cc"
yy448:
	++cur;
#line 788 "parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4045 "parse/lex.cc"
yy449:
	++cur;
#line 789 "parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4050 "parse/lex.cc"
yy450:
	++cur;
#line 790 "parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4055 "parse/lex.cc"
yy451:
	++cur;
#line 791 "parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4060 "parse/lex.cc"
yy452:
	++cur;
#line 792 "parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4065 "parse/lex.cc"
yy453:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy442;
		if (yych <= '9') goto yy458;
		goto yy442;
	} else {
		if (yych <= 'F') goto yy458;
		if (yych <= '`') goto yy442;
		if (yych <= 'f') goto yy458;
		goto yy442;
	}
yy454:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy455;
	if (yych <= '7') goto yy459;
yy455:
	cur = mar;
	if (yyaccept == 0) {
		goto yy439;
	} else {
		goto yy442;
	}
yy456:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy455;
		if (yych <= '9') goto yy460;
		goto yy455;
	} else {
		if (yych <= 'F') goto yy460;
		if (yych <= '`') goto yy455;
		if (yych <= 'f') goto yy460;
		goto yy455;
	}
yy457:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy455;
		if (yych <= '9') goto yy461;
		goto yy455;
	} else {
		if (yych <= 'F') goto yy461;
		if (yych <= '`') goto yy455;
		if (yych <= 'f') goto yy461;
		goto yy455;
	}
yy458:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy455;
		if (yych <= '9') goto yy462;
		goto yy455;
	} else {
		if (yych <= 'F') goto yy462;
		if (yych <= '`') goto yy455;
		if (yych <= 'f') goto yy462;
		goto yy455;
	}
yy459:
	++cur;
#line 785 "parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4130 "parse/lex.cc"
yy460:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy455;
		if (yych <= '9') goto yy463;
		goto yy455;
	} else {
		if (yych <= 'F') goto yy463;
		if (yych <= '`') goto yy455;
		if (yych <= 'f') goto yy463;
		goto yy455;
	}
yy461:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy455;
		if (yych <= '9') goto yy458;
		goto yy455;
	} else {
		if (yych <= 'F') goto yy458;
		if (yych <= '`') goto yy455;
		if (yych <= 'f') goto yy458;
		goto yy455;
	}
yy462:
	++cur;
#line 784 "parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4159 "parse/lex.cc"
yy463:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy455;
		if (yych >= ':') goto yy455;
	} else {
		if (yych <= 'F') goto yy464;
		if (yych <= '`') goto yy455;
		if (yych >= 'g') goto yy455;
	}
yy464:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy455;
		if (yych <= '9') goto yy457;
		goto yy455;
	} else {
		if (yych <= 'F') goto yy457;
		if (yych <= '`') goto yy455;
		if (yych <= 'f') goto yy457;
		goto yy455;
	}
}
#line 802 "parse/lex.re"

    }
    else {
        
#line 4188 "parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy466;
			if (yych == '\n') goto yy469;
			goto yy467;
		} else {
			if (yych <= '\r') goto yy470;
			if (yych == '\\') goto yy471;
			goto yy467;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy473;
			if (yych <= 0xDF) goto yy475;
			if (yych <= 0xE0) goto yy476;
			goto yy477;
		} else {
			if (yych <= 0xF0) goto yy478;
			if (yych <= 0xF3) goto yy479;
			if (yych <= 0xF4) goto yy480;
			goto yy473;
		}
	}
yy466:
	++cur;
#line 781 "parse/lex.re"
	{ fail_if_eof(); return 0; }
#line 4221 "parse/lex.cc"
yy467:
	++cur;
yy468:
#line 783 "parse/lex.re"
	{ return decode(tok); }
#line 4227 "parse/lex.cc"
yy469:
	++cur;
#line 775 "parse/lex.re"
	{ msg.error(loc, "newline in character class"); exit(1); }
#line 4232 "parse/lex.cc"
yy470:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy469;
	goto yy468;
yy471:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 'b') {
		if (yych <= '7') {
			if (yych <= '\r') {
				if (yych <= '\t') {
					if (yych >= 0x01) goto yy481;
				} else {
					if (yych <= '\n') goto yy469;
					if (yych <= '\f') goto yy481;
					goto yy483;
				}
			} else {
				if (yych <= '-') {
					if (yych <= ',') goto yy481;
					goto yy484;
				} else {
					if (yych <= '/') goto yy481;
					if (yych <= '3') goto yy485;
					goto yy487;
				}
			}
		} else {
			if (yych <= '[') {
				if (yych <= 'U') {
					if (yych <= 'T') goto yy481;
					goto yy488;
				} else {
					if (yych == 'X') goto yy490;
					goto yy481;
				}
			} else {
				if (yych <= ']') {
					if (yych <= '\\') goto yy491;
					goto yy492;
				} else {
					if (yych <= '`') goto yy481;
					if (yych <= 'a') goto yy493;
					goto yy494;
				}
			}
		}
	} else {
		if (yych <= 'v') {
			if (yych <= 'q') {
				if (yych <= 'f') {
					if (yych <= 'e') goto yy481;
					goto yy495;
				} else {
					if (yych == 'n') goto yy496;
					goto yy481;
				}
			} else {
				if (yych <= 's') {
					if (yych <= 'r') goto yy497;
					goto yy481;
				} else {
					if (yych <= 't') goto yy498;
					if (yych <= 'u') goto yy490;
					goto yy499;
				}
			}
		} else {
			if (yych <= 0xDF) {
				if (yych <= 'x') {
					if (yych <= 'w') goto yy481;
					goto yy500;
				} else {
					if (yych <= 0x7F) goto yy481;
					if (yych >= 0xC2) goto yy501;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xE0) goto yy503;
					if (yych <= 0xEF) goto yy504;
					goto yy505;
				} else {
					if (yych <= 0xF3) goto yy506;
					if (yych <= 0xF4) goto yy507;
				}
			}
		}
	}
yy472:
#line 778 "parse/lex.re"
	{ msg.error(loc, "syntax error in escape sequence"); exit(1); }
#line 4324 "parse/lex.cc"
yy473:
	++cur;
yy474:
#line 779 "parse/lex.re"
	{ msg.error(loc, "syntax error"); exit(1); }
#line 4330 "parse/lex.cc"
yy475:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy474;
	if (yych <= 0xBF) goto yy467;
	goto yy474;
yy476:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x9F) goto yy474;
	if (yych <= 0xBF) goto yy508;
	goto yy474;
yy477:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy474;
	if (yych <= 0xBF) goto yy508;
	goto yy474;
yy478:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x8F) goto yy474;
	if (yych <= 0xBF) goto yy509;
	goto yy474;
yy479:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy474;
	if (yych <= 0xBF) goto yy509;
	goto yy474;
yy480:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy474;
	if (yych <= 0x8F) goto yy509;
	goto yy474;
yy481:
	++cur;
yy482:
#line 796 "parse/lex.re"
	{
        msg.warn.useless_escape(loc, tok, cur);
        return decode(tok + 1);
    }
#line 4374 "parse/lex.cc"
yy483:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy469;
	goto yy482;
yy484:
	++cur;
#line 794 "parse/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 4383 "parse/lex.cc"
yy485:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy486;
	if (yych <= '7') goto yy510;
yy486:
#line 777 "parse/lex.re"
	{ msg.error(loc, "syntax error in octal escape sequence"); exit(1); }
#line 4392 "parse/lex.cc"
yy487:
	++cur;
	goto yy486;
yy488:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy489;
		if (yych <= '9') goto yy511;
	} else {
		if (yych <= 'F') goto yy511;
		if (yych <= '`') goto yy489;
		if (yych <= 'f') goto yy511;
	}
yy489:
#line 776 "parse/lex.re"
	{ msg.error(loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4410 "parse/lex.cc"
yy490:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy489;
		if (yych <= '9') goto yy512;
		goto yy489;
	} else {
		if (yych <= 'F') goto yy512;
		if (yych <= '`') goto yy489;
		if (yych <= 'f') goto yy512;
		goto yy489;
	}
yy491:
	++cur;
#line 793 "parse/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 4428 "parse/lex.cc"
yy492:
	++cur;
#line 795 "parse/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 4433 "parse/lex.cc"
yy493:
	++cur;
#line 786 "parse/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 4438 "parse/lex.cc"
yy494:
	++cur;
#line 787 "parse/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 4443 "parse/lex.cc"
yy495:
	++cur;
#line 788 "parse/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 4448 "parse/lex.cc"
yy496:
	++cur;
#line 789 "parse/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 4453 "parse/lex.cc"
yy497:
	++cur;
#line 790 "parse/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 4458 "parse/lex.cc"
yy498:
	++cur;
#line 791 "parse/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 4463 "parse/lex.cc"
yy499:
	++cur;
#line 792 "parse/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 4468 "parse/lex.cc"
yy500:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy489;
		if (yych <= '9') goto yy513;
		goto yy489;
	} else {
		if (yych <= 'F') goto yy513;
		if (yych <= '`') goto yy489;
		if (yych <= 'f') goto yy513;
		goto yy489;
	}
yy501:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy502;
	if (yych <= 0xBF) goto yy481;
yy502:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy472;
		} else {
			goto yy474;
		}
	} else {
		if (yyaccept == 2) {
			goto yy486;
		} else {
			goto yy489;
		}
	}
yy503:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy502;
	if (yych <= 0xBF) goto yy501;
	goto yy502;
yy504:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy502;
	if (yych <= 0xBF) goto yy501;
	goto yy502;
yy505:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy502;
	if (yych <= 0xBF) goto yy504;
	goto yy502;
yy506:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy502;
	if (yych <= 0xBF) goto yy504;
	goto yy502;
yy507:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy502;
	if (yych <= 0x8F) goto yy504;
	goto yy502;
yy508:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy502;
	if (yych <= 0xBF) goto yy467;
	goto yy502;
yy509:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy502;
	if (yych <= 0xBF) goto yy508;
	goto yy502;
yy510:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy502;
	if (yych <= '7') goto yy514;
	goto yy502;
yy511:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy502;
		if (yych <= '9') goto yy515;
		goto yy502;
	} else {
		if (yych <= 'F') goto yy515;
		if (yych <= '`') goto yy502;
		if (yych <= 'f') goto yy515;
		goto yy502;
	}
yy512:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy502;
		if (yych <= '9') goto yy516;
		goto yy502;
	} else {
		if (yych <= 'F') goto yy516;
		if (yych <= '`') goto yy502;
		if (yych <= 'f') goto yy516;
		goto yy502;
	}
yy513:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy502;
		if (yych <= '9') goto yy517;
		goto yy502;
	} else {
		if (yych <= 'F') goto yy517;
		if (yych <= '`') goto yy502;
		if (yych <= 'f') goto yy517;
		goto yy502;
	}
yy514:
	++cur;
#line 785 "parse/lex.re"
	{ return unesc_oct(tok, cur); }
#line 4581 "parse/lex.cc"
yy515:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy502;
		if (yych <= '9') goto yy518;
		goto yy502;
	} else {
		if (yych <= 'F') goto yy518;
		if (yych <= '`') goto yy502;
		if (yych <= 'f') goto yy518;
		goto yy502;
	}
yy516:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy502;
		if (yych <= '9') goto yy513;
		goto yy502;
	} else {
		if (yych <= 'F') goto yy513;
		if (yych <= '`') goto yy502;
		if (yych <= 'f') goto yy513;
		goto yy502;
	}
yy517:
	++cur;
#line 784 "parse/lex.re"
	{ return unesc_hex(tok, cur); }
#line 4610 "parse/lex.cc"
yy518:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy502;
		if (yych >= ':') goto yy502;
	} else {
		if (yych <= 'F') goto yy519;
		if (yych <= '`') goto yy502;
		if (yych >= 'g') goto yy502;
	}
yy519:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy502;
		if (yych <= '9') goto yy512;
		goto yy502;
	} else {
		if (yych <= 'F') goto yy512;
		if (yych <= '`') goto yy502;
		if (yych <= 'f') goto yy512;
		goto yy502;
	}
}
#line 805 "parse/lex.re"

    }
}

bool Scanner::lex_str_chr(char quote, ASTChar &ast)
{
    tok = cur;
    ast.loc = cur_loc();
    #line 839 "parse/lex.re"

    if (globopts->input_encoding == Enc::ASCII) {
        
#line 4647 "parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy521;
		if (yych == '\n') goto yy524;
		goto yy522;
	} else {
		if (yych <= '\r') goto yy525;
		if (yych == '\\') goto yy526;
		goto yy522;
	}
yy521:
	++cur;
#line 821 "parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4666 "parse/lex.cc"
yy522:
	++cur;
yy523:
#line 823 "parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4672 "parse/lex.cc"
yy524:
	++cur;
#line 815 "parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4677 "parse/lex.cc"
yy525:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy524;
	goto yy523;
yy526:
	yych = (unsigned char)*++cur;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy527;
				if (yych <= '\t') goto yy528;
				goto yy524;
			} else {
				if (yych == '\r') goto yy530;
				if (yych <= '/') goto yy528;
				goto yy531;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy533;
				if (yych == 'U') goto yy534;
				goto yy528;
			} else {
				if (yych <= 'X') goto yy536;
				if (yych == '\\') goto yy537;
				goto yy528;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy538;
				if (yych <= 'b') goto yy539;
				goto yy528;
			} else {
				if (yych <= 'f') goto yy540;
				if (yych == 'n') goto yy541;
				goto yy528;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy542;
				if (yych <= 's') goto yy528;
				if (yych <= 't') goto yy543;
				goto yy536;
			} else {
				if (yych <= 'v') goto yy544;
				if (yych == 'x') goto yy545;
				goto yy528;
			}
		}
	}
yy527:
#line 818 "parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 4733 "parse/lex.cc"
yy528:
	++cur;
yy529:
#line 834 "parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 4743 "parse/lex.cc"
yy530:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy524;
	goto yy529;
yy531:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy532;
	if (yych <= '7') goto yy546;
yy532:
#line 817 "parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 4756 "parse/lex.cc"
yy533:
	++cur;
	goto yy532;
yy534:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy535;
		if (yych <= '9') goto yy548;
	} else {
		if (yych <= 'F') goto yy548;
		if (yych <= '`') goto yy535;
		if (yych <= 'f') goto yy548;
	}
yy535:
#line 816 "parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 4774 "parse/lex.cc"
yy536:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy535;
		if (yych <= '9') goto yy549;
		goto yy535;
	} else {
		if (yych <= 'F') goto yy549;
		if (yych <= '`') goto yy535;
		if (yych <= 'f') goto yy549;
		goto yy535;
	}
yy537:
	++cur;
#line 833 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 4792 "parse/lex.cc"
yy538:
	++cur;
#line 826 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 4797 "parse/lex.cc"
yy539:
	++cur;
#line 827 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 4802 "parse/lex.cc"
yy540:
	++cur;
#line 828 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 4807 "parse/lex.cc"
yy541:
	++cur;
#line 829 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 4812 "parse/lex.cc"
yy542:
	++cur;
#line 830 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 4817 "parse/lex.cc"
yy543:
	++cur;
#line 831 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 4822 "parse/lex.cc"
yy544:
	++cur;
#line 832 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 4827 "parse/lex.cc"
yy545:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy535;
		if (yych <= '9') goto yy550;
		goto yy535;
	} else {
		if (yych <= 'F') goto yy550;
		if (yych <= '`') goto yy535;
		if (yych <= 'f') goto yy550;
		goto yy535;
	}
yy546:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy547;
	if (yych <= '7') goto yy551;
yy547:
	cur = mar;
	if (yyaccept == 0) {
		goto yy532;
	} else {
		goto yy535;
	}
yy548:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy552;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy552;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy552;
		goto yy547;
	}
yy549:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy553;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy553;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy553;
		goto yy547;
	}
yy550:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy554;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy554;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy554;
		goto yy547;
	}
yy551:
	++cur;
#line 825 "parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 4892 "parse/lex.cc"
yy552:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy555;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy555;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy555;
		goto yy547;
	}
yy553:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy550;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy550;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy550;
		goto yy547;
	}
yy554:
	++cur;
#line 824 "parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 4921 "parse/lex.cc"
yy555:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych >= ':') goto yy547;
	} else {
		if (yych <= 'F') goto yy556;
		if (yych <= '`') goto yy547;
		if (yych >= 'g') goto yy547;
	}
yy556:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy547;
		if (yych <= '9') goto yy549;
		goto yy547;
	} else {
		if (yych <= 'F') goto yy549;
		if (yych <= '`') goto yy547;
		if (yych <= 'f') goto yy549;
		goto yy547;
	}
}
#line 841 "parse/lex.re"

    }
    else {
        
#line 4950 "parse/lex.cc"
{
	unsigned char yych;
	unsigned int yyaccept = 0;
	if ((lim - cur) < 10) { if (!fill(10)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x7F) {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy558;
			if (yych == '\n') goto yy561;
			goto yy559;
		} else {
			if (yych <= '\r') goto yy562;
			if (yych == '\\') goto yy563;
			goto yy559;
		}
	} else {
		if (yych <= 0xEF) {
			if (yych <= 0xC1) goto yy565;
			if (yych <= 0xDF) goto yy567;
			if (yych <= 0xE0) goto yy568;
			goto yy569;
		} else {
			if (yych <= 0xF0) goto yy570;
			if (yych <= 0xF3) goto yy571;
			if (yych <= 0xF4) goto yy572;
			goto yy565;
		}
	}
yy558:
	++cur;
#line 821 "parse/lex.re"
	{ fail_if_eof(); ast.chr = 0; return true; }
#line 4983 "parse/lex.cc"
yy559:
	++cur;
yy560:
#line 823 "parse/lex.re"
	{ ast.chr = decode(tok); return tok[0] != quote; }
#line 4989 "parse/lex.cc"
yy561:
	++cur;
#line 815 "parse/lex.re"
	{ msg.error(ast.loc, "newline in character string"); exit(1); }
#line 4994 "parse/lex.cc"
yy562:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy561;
	goto yy560;
yy563:
	yyaccept = 0;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 'f') {
		if (yych <= 'T') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy564;
				if (yych == '\n') goto yy561;
				goto yy573;
			} else {
				if (yych <= '/') {
					if (yych <= '\r') goto yy575;
					goto yy573;
				} else {
					if (yych <= '3') goto yy576;
					if (yych <= '7') goto yy578;
					goto yy573;
				}
			}
		} else {
			if (yych <= '\\') {
				if (yych <= 'W') {
					if (yych <= 'U') goto yy579;
					goto yy573;
				} else {
					if (yych <= 'X') goto yy581;
					if (yych <= '[') goto yy573;
					goto yy582;
				}
			} else {
				if (yych <= 'a') {
					if (yych <= '`') goto yy573;
					goto yy583;
				} else {
					if (yych <= 'b') goto yy584;
					if (yych <= 'e') goto yy573;
					goto yy585;
				}
			}
		}
	} else {
		if (yych <= 'w') {
			if (yych <= 'r') {
				if (yych == 'n') goto yy586;
				if (yych <= 'q') goto yy573;
				goto yy587;
			} else {
				if (yych <= 't') {
					if (yych <= 's') goto yy573;
					goto yy588;
				} else {
					if (yych <= 'u') goto yy581;
					if (yych <= 'v') goto yy589;
					goto yy573;
				}
			}
		} else {
			if (yych <= 0xE0) {
				if (yych <= 0x7F) {
					if (yych <= 'x') goto yy590;
					goto yy573;
				} else {
					if (yych <= 0xC1) goto yy564;
					if (yych <= 0xDF) goto yy591;
					goto yy593;
				}
			} else {
				if (yych <= 0xF0) {
					if (yych <= 0xEF) goto yy594;
					goto yy595;
				} else {
					if (yych <= 0xF3) goto yy596;
					if (yych <= 0xF4) goto yy597;
				}
			}
		}
	}
yy564:
#line 818 "parse/lex.re"
	{ msg.error(ast.loc, "syntax error in escape sequence"); exit(1); }
#line 5079 "parse/lex.cc"
yy565:
	++cur;
yy566:
#line 819 "parse/lex.re"
	{ msg.error(ast.loc, "syntax error"); exit(1); }
#line 5085 "parse/lex.cc"
yy567:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy566;
	if (yych <= 0xBF) goto yy559;
	goto yy566;
yy568:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x9F) goto yy566;
	if (yych <= 0xBF) goto yy598;
	goto yy566;
yy569:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy566;
	if (yych <= 0xBF) goto yy598;
	goto yy566;
yy570:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x8F) goto yy566;
	if (yych <= 0xBF) goto yy599;
	goto yy566;
yy571:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy566;
	if (yych <= 0xBF) goto yy599;
	goto yy566;
yy572:
	yyaccept = 1;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x7F) goto yy566;
	if (yych <= 0x8F) goto yy599;
	goto yy566;
yy573:
	++cur;
yy574:
#line 834 "parse/lex.re"
	{
        ast.chr = decode(tok + 1);
        if (tok[1] != quote) msg.warn.useless_escape(ast.loc, tok, cur);
        return true;
    }
#line 5130 "parse/lex.cc"
yy575:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy561;
	goto yy574;
yy576:
	yyaccept = 2;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '/') goto yy577;
	if (yych <= '7') goto yy600;
yy577:
#line 817 "parse/lex.re"
	{ msg.error(ast.loc, "syntax error in octal escape sequence"); exit(1); }
#line 5143 "parse/lex.cc"
yy578:
	++cur;
	goto yy577;
yy579:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy580;
		if (yych <= '9') goto yy601;
	} else {
		if (yych <= 'F') goto yy601;
		if (yych <= '`') goto yy580;
		if (yych <= 'f') goto yy601;
	}
yy580:
#line 816 "parse/lex.re"
	{ msg.error(ast.loc, "syntax error in hexadecimal escape sequence"); exit(1); }
#line 5161 "parse/lex.cc"
yy581:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy580;
		if (yych <= '9') goto yy602;
		goto yy580;
	} else {
		if (yych <= 'F') goto yy602;
		if (yych <= '`') goto yy580;
		if (yych <= 'f') goto yy602;
		goto yy580;
	}
yy582:
	++cur;
#line 833 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\\'); return true; }
#line 5179 "parse/lex.cc"
yy583:
	++cur;
#line 826 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\a'); return true; }
#line 5184 "parse/lex.cc"
yy584:
	++cur;
#line 827 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\b'); return true; }
#line 5189 "parse/lex.cc"
yy585:
	++cur;
#line 828 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\f'); return true; }
#line 5194 "parse/lex.cc"
yy586:
	++cur;
#line 829 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\n'); return true; }
#line 5199 "parse/lex.cc"
yy587:
	++cur;
#line 830 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\r'); return true; }
#line 5204 "parse/lex.cc"
yy588:
	++cur;
#line 831 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\t'); return true; }
#line 5209 "parse/lex.cc"
yy589:
	++cur;
#line 832 "parse/lex.re"
	{ ast.chr = static_cast<uint8_t>('\v'); return true; }
#line 5214 "parse/lex.cc"
yy590:
	yyaccept = 3;
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= '@') {
		if (yych <= '/') goto yy580;
		if (yych <= '9') goto yy603;
		goto yy580;
	} else {
		if (yych <= 'F') goto yy603;
		if (yych <= '`') goto yy580;
		if (yych <= 'f') goto yy603;
		goto yy580;
	}
yy591:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy592;
	if (yych <= 0xBF) goto yy573;
yy592:
	cur = mar;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy564;
		} else {
			goto yy566;
		}
	} else {
		if (yyaccept == 2) {
			goto yy577;
		} else {
			goto yy580;
		}
	}
yy593:
	yych = (unsigned char)*++cur;
	if (yych <= 0x9F) goto yy592;
	if (yych <= 0xBF) goto yy591;
	goto yy592;
yy594:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy592;
	if (yych <= 0xBF) goto yy591;
	goto yy592;
yy595:
	yych = (unsigned char)*++cur;
	if (yych <= 0x8F) goto yy592;
	if (yych <= 0xBF) goto yy594;
	goto yy592;
yy596:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy592;
	if (yych <= 0xBF) goto yy594;
	goto yy592;
yy597:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy592;
	if (yych <= 0x8F) goto yy594;
	goto yy592;
yy598:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy592;
	if (yych <= 0xBF) goto yy559;
	goto yy592;
yy599:
	yych = (unsigned char)*++cur;
	if (yych <= 0x7F) goto yy592;
	if (yych <= 0xBF) goto yy598;
	goto yy592;
yy600:
	yych = (unsigned char)*++cur;
	if (yych <= '/') goto yy592;
	if (yych <= '7') goto yy604;
	goto yy592;
yy601:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy605;
		goto yy592;
	} else {
		if (yych <= 'F') goto yy605;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy605;
		goto yy592;
	}
yy602:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy606;
		goto yy592;
	} else {
		if (yych <= 'F') goto yy606;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy606;
		goto yy592;
	}
yy603:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy607;
		goto yy592;
	} else {
		if (yych <= 'F') goto yy607;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy607;
		goto yy592;
	}
yy604:
	++cur;
#line 825 "parse/lex.re"
	{ ast.chr = unesc_oct(tok, cur); return true; }
#line 5327 "parse/lex.cc"
yy605:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy608;
		goto yy592;
	} else {
		if (yych <= 'F') goto yy608;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy608;
		goto yy592;
	}
yy606:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy603;
		goto yy592;
	} else {
		if (yych <= 'F') goto yy603;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy603;
		goto yy592;
	}
yy607:
	++cur;
#line 824 "parse/lex.re"
	{ ast.chr = unesc_hex(tok, cur); return true; }
#line 5356 "parse/lex.cc"
yy608:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych >= ':') goto yy592;
	} else {
		if (yych <= 'F') goto yy609;
		if (yych <= '`') goto yy592;
		if (yych >= 'g') goto yy592;
	}
yy609:
	yych = (unsigned char)*++cur;
	if (yych <= '@') {
		if (yych <= '/') goto yy592;
		if (yych <= '9') goto yy602;
		goto yy592;
	} else {
		if (yych <= 'F') goto yy602;
		if (yych <= '`') goto yy592;
		if (yych <= 'f') goto yy602;
		goto yy592;
	}
}
#line 844 "parse/lex.re"

    }
}

const AST *Scanner::lex_str(char quote)
{
    const loc_t &loc = tok_loc();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    ASTChar c;
    for (;;) {
        if (!lex_str_chr(quote, c)) {
            return ast_str(loc, str, quote == '\'');
        }
        str->push_back(c);
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 5403 "parse/lex.cc"
{
	unsigned char yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((lim - cur) < 2) { if (!fill(2)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy611;
		} else {
			if (yych <= '\n') goto yy613;
			if (yych <= '\f') goto yy611;
			goto yy614;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy611;
			goto yy615;
		} else {
			if (yych <= '0') goto yy611;
			if (yych <= '9') goto yy616;
			goto yy611;
		}
	}
	++cur;
#line 886 "parse/lex.re"
	{ --cur; return; }
#line 5463 "parse/lex.cc"
yy611:
	++cur;
yy612:
#line 887 "parse/lex.re"
	{ goto sourceline; }
#line 5469 "parse/lex.cc"
yy613:
	++cur;
#line 885 "parse/lex.re"
	{ pos = tok = cur; return; }
#line 5474 "parse/lex.cc"
yy614:
	yych = (unsigned char)*++cur;
	if (yych == '\n') goto yy613;
	goto yy612;
yy615:
	yych = (unsigned char)*(mar = ++cur);
	if (yych <= 0x00) goto yy612;
	if (yych == '\n') goto yy612;
	goto yy618;
yy616:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yybm[0+yych] & 64) {
		goto yy616;
	}
#line 866 "parse/lex.re"
	{
        uint32_t l;
        if (!s_to_u32_unsafe(tok, cur, l)) {
            msg.error(tok_loc(), "line number overflow");
            exit(1);
        }
        set_line(l);
        goto sourceline;
    }
#line 5501 "parse/lex.cc"
yy617:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
yy618:
	if (yybm[0+yych] & 128) {
		goto yy617;
	}
	if (yych <= '\n') goto yy619;
	if (yych <= '"') goto yy620;
	goto yy621;
yy619:
	cur = mar;
	goto yy612;
yy620:
	++cur;
#line 876 "parse/lex.re"
	{
        Input &in = get_input();
        std::string &name = in.escaped_name;
        name = escape_backslashes(getstr(tok + 1, cur - 1));
        in.fidx = static_cast<uint32_t>(msg.filenames.size());
        msg.filenames.push_back(name);
        goto sourceline;
    }
#line 5527 "parse/lex.cc"
yy621:
	++cur;
	if (lim <= cur) { if (!fill(1)) { error("unexpected end of input"); exit(1); } }
	yych = (unsigned char)*cur;
	if (yych <= 0x00) goto yy619;
	if (yych == '\n') goto yy619;
	goto yy617;
}
#line 888 "parse/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (is_eof()) {
        msg.error(cur_loc(), "unexpected end of input");
        exit(1);
    }
}

#undef YYCTYPE
#undef YYCURSOR
#undef YYLIMIT
#undef YYMARKER
#undef YYFILL

} // end namespace re2c
